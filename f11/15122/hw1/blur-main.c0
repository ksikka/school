#use <img>
#use <parse>
#use <args>
#use <conio>
#use <file>
#use <string>

int main() {
    image_t source;
    image_t dest;
    int width;
    int height;
    pixel[] inpixels;
    int[] blurmask;
    pixel[] outpixels;
    pixel[] newpixels;
    string *output = alloc(string);
    string *input = alloc(string);
    string *mask = alloc(string);
    string type = "blur";
    string[] args;
    int i;
  
    args_string("-o", output);
    args_string("-i", input);
    args_string("-m", mask);

    args = args_parse()->argv;

    if (string_equal("", *input) || string_equal("", *mask)) {
        println("Usage: blur -i <input image> -m <blur mask> [-o <output image>]");
        return 1;
    }

    if (string_equal("", *output))
        *output = string_join(type, string_join("_", *input));
  
    print("Input image file:  ");
    println(*input);
    print("Output image file: ");
    println(*output);
    print("Blur mask file: ");
    println(*mask);
    println("");
  
    source = image_load(*input);
    width = image_width(source);
    height = image_height(source);

    print("Loaded image.  Dimensions are ");
    printint(width);
    print(" by ");
    printint(height);
    println(".");
  
    file_t file = file_read(*mask);

    int* size = parse_int(file_readline(file),10);
    printint(*size); println("");
    if (size == NULL || (*size < 0) || (*size % 2 != 1)) {
        println("Invalid blur mask size");
        return 1;
    }      
    blurmask = alloc_array(int, *size * *size);
    i = 0;
    while (!file_eof(file)) {
      int* value = parse_int(file_readline(file),10);
      if (value == NULL || *value < 0) {
	print("Invalid weight in mask file on line ");
	printint(i+2);
	return 1;
      }
      blurmask[i] = *value;
      i++;
    }
    if (i != *size * *size) {
      println("Not enough weights in mask file");
      return 1;
    }

    dest = image_create(width, height);
    inpixels = image_data(source);
    outpixels = image_data(dest);
    print("Running blur...");
    newpixels = blur(inpixels, width, height, blurmask, *size);
    println("");
    for (i = 0; i < width*height; i++)
        outpixels[i] = newpixels[i];
    print("Saving output...");
    image_save(dest, *output);
    println("");
    image_destroy(dest);
    image_destroy(source);
    return 0;
}

